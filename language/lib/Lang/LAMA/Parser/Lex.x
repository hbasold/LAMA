-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
module Lang.LAMA.Parser.Lex where


import qualified Data.ByteString.Lazy.Char8 as BS
import qualified Data.ByteString.Char8 as B
import Data.Word (Word8)
import Codec.Binary.UTF8.String (encodeChar)
}


$l = [a-zA-Z\192 - \255] # [\215 \247]    -- isolatin1 letter FIXME
$c = [A-Z\192-\221] # [\215]    -- capital isolatin1 letter FIXME
$s = [a-z\222-\255] # [\247]    -- small isolatin1 letter FIXME
$d = [0-9]                -- digit
$i = [$l $d _ ']          -- identifier character
$u = [\0-\255]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \; | \= | \{ | \} | \, | \^ | \( | \# | \) | \[ | \] | \- | \/ | \: | \. | \_ | \= \> | \< | \> | \< \= | \> \= | \+ | \*

:-
"--" [.]* ; -- Toss single line comments

$white+ ;
@rsyms { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }
($l | \_)($l | $d | \_)* { tok (\p s -> PT p (eitherResIdent (T_Identifier . share) s)) }
($l | \_)($l | $d | \_)* \' { tok (\p s -> PT p (eitherResIdent (T_StateId . share) s)) }

$l $i*   { tok (\p s -> PT p (eitherResIdent (TV . share) s)) }


$d+      { tok (\p s -> PT p (TI $ share s))    }


{

tok f p s = f p s

share :: BS.ByteString -> BS.ByteString
share = id

data Tok =
   TS !BS.ByteString !Int    -- reserved words and symbols
 | TL !BS.ByteString         -- string literals
 | TI !BS.ByteString         -- integer literals
 | TV !BS.ByteString         -- identifiers
 | TD !BS.ByteString         -- double precision float literals
 | TC !BS.ByteString         -- character literals
 | T_Identifier !BS.ByteString
 | T_StateId !BS.ByteString

 deriving (Eq,Show,Ord)

data Token = 
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

tokenPos (PT (Pn _ l _) _ :_) = "line " ++ show l
tokenPos (Err (Pn _ l _) :_) = "line " ++ show l
tokenPos _ = "end of file"

posLineCol (Pn _ l c) = (l,c)
mkPosToken t@(PT p _) = (posLineCol p, toStrict $ prToken t)
toStrict :: BS.ByteString -> B.ByteString
toStrict = B.concat . BS.toChunks

prToken t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  PT _ (T_Identifier s) -> s
  PT _ (T_StateId s) -> s


data BTree = N | B BS.ByteString Tok BTree BTree deriving (Show)

eitherResIdent :: (BS.ByteString -> Tok) -> BS.ByteString -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | s < a  = treeFind left
                              | s > a  = treeFind right
                              | s == a = t

resWords = b "enum" 31 (b ">" 16 (b "." 8 (b "*" 4 (b "(" 2 (b "#" 1 N N) (b ")" 3 N N)) (b "," 6 (b "+" 5 N N) (b "-" 7 N N))) (b "<" 12 (b ":" 10 (b "/" 9 N N) (b ";" 11 N N)) (b "=" 14 (b "<=" 13 N N) (b "=>" 15 N N)))) (b "automaton" 24 (b "^" 20 (b "[" 18 (b ">=" 17 N N) (b "]" 19 N N)) (b "and" 22 (b "_" 21 N N) (b "assertion" 23 N N))) (b "definition" 28 (b "constants" 26 (b "bool" 25 N N) (b "default" 27 N N)) (b "edge" 30 (b "div" 29 N N) N)))) (b "or" 46 (b "local" 39 (b "int" 35 (b "initial" 33 (b "false" 32 N N) (b "input" 34 N N)) (b "ite" 37 (b "invariant" 36 N N) (b "let" 38 N N))) (b "node" 43 (b "match" 41 (b "location" 40 N N) (b "mod" 42 N N)) (b "not" 45 (b "nodes" 44 N N) N))) (b "true" 54 (b "sint" 50 (b "real" 48 (b "project" 47 N N) (b "returns" 49 N N)) (b "tel" 52 (b "state" 51 N N) (b "transition" 53 N N))) (b "xor" 58 (b "uint" 56 (b "typedef" 55 N N) (b "use" 57 N N)) (b "}" 60 (b "{" 59 N N) N))))
   where b s n = let bs = BS.pack s
                  in B bs (TS bs n)

unescapeInitTail :: BS.ByteString -> BS.ByteString
unescapeInitTail = BS.pack . unesc . tail . BS.unpack where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  BS.ByteString)   -- current input string

tokens :: BS.ByteString -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (BS.take (toEnum len) str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case BS.uncons s of
    Nothing  -> Nothing
    Just (c,s) ->
             let p'     = alexMove p c
                 (b:bs) = encodeChar c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c
